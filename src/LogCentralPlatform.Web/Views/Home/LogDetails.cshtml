@model LogEntryViewModel
@{
    ViewData["Title"] = "Détails du log";
    
    string GetHeaderClass(LogLevel level)
    {
        return level.ToString()?.ToLower() switch
        {
            "error" or "critical" => "header-error",
            "warning" => "header-warning",
            "information" => "header-info",
            _ => ""
        };
    }
    
    string GetLevelIcon(LogLevel level)
    {
        return level.ToString()?.ToLower() switch
        {
            "error" or "critical" => "bi-exclamation-triangle-fill",
            "warning" => "bi-exclamation-circle-fill",
            "information" => "bi-info-circle-fill",
            "debug" => "bi-bug",
            "trace" => "bi-activity",
            _ => "bi-info-circle"
        };
    }
}

<div class="container">
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index"><i class="bi bi-house-door"></i> Accueil</a></li>
            <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Logs"><i class="bi bi-list-ul"></i> Logs</a></li>
            <li class="breadcrumb-item active" aria-current="page">Détails du log</li>
        </ol>
    </nav>

    <div class="row">
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header @GetHeaderClass(Model.Level) d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi @GetLevelIcon(Model.Level) me-2"></i>
                        @Model.Level
                    </h5>
                    <div>
                        <span class="badge bg-light text-dark" data-bs-toggle="tooltip" title="Date et heure de l'événement">
                            <i class="bi bi-clock me-1"></i> @Model.FormattedTimestamp
                        </span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-3">
                        <h6 class="card-subtitle text-muted">
                            <span data-bs-toggle="tooltip" title="Service concerné">
                                <i class="bi bi-gear me-1"></i> @Model.ServiceName
                            </span>
                            @if (!string.IsNullOrEmpty(Model.ServiceVersion))
                            {
                                <span class="mx-2">|</span>
                                <span data-bs-toggle="tooltip" title="Version du service">
                                    <i class="bi bi-tag me-1"></i> @Model.ServiceVersion
                                </span>
                            }
                        </h6>
                        <div>
                            <button class="btn btn-sm btn-outline-secondary" onclick="copyToClipboard('@Model.Id', this)">
                                <i class="bi bi-clipboard me-1"></i> Copier ID
                            </button>
                        </div>
                    </div>
                    
                    <h5 class="card-title mb-4 p-2 bg-light rounded">@Model.Message</h5>

                    @if (!string.IsNullOrEmpty(Model.StackTrace))
                    {
                        <div class="mt-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6><i class="bi bi-layers me-1"></i> Stack Trace</h6>
                                <button class="btn btn-sm btn-outline-secondary toggle-exception" data-target="stackTrace">
                                    <i class="bi bi-chevron-down"></i> Afficher la trace
                                </button>
                            </div>
                            <pre id="stackTrace" class="bg-light p-3 rounded d-none"><code>@Model.StackTrace</code></pre>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Section contextuelle -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-diagram-3 me-2"></i>Contexte</h5>
                </div>
                <div class="card-body">
                    <h6>Logs similaires</h6>
                    <p class="text-muted small">Logs présentant des caractéristiques semblables (même service ou même erreur)</p>
                    
                    @if (Model.RelatedLogs != null && Model.RelatedLogs.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm table-hover">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Niveau</th>
                                        <th>Message</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var log in Model.RelatedLogs)
                                    {
                                        <tr>
                                            <td>@log.Timestamp.ToString("dd/MM/yyyy HH:mm")</td>
                                            <td><span class="log-level log-level-@log.Level.ToLower()">@log.Level</span></td>
                                            <td class="text-truncate" style="max-width: 300px;">@log.Message</td>
                                            <td><a asp-action="LogDetails" asp-route-id="@log.Id" class="btn btn-sm btn-outline-primary"><i class="bi bi-eye"></i></a></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-light">
                            Aucun log similaire trouvé.
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-info-circle me-2"></i>Informations</h5>
                </div>
                <div class="card-body">
                    <dl class="row mb-0">
                        <dt class="col-sm-5">ID</dt>
                        <dd class="col-sm-7"><code>@Model.Id</code></dd>
                        
                        <dt class="col-sm-5">Service</dt>
                        <dd class="col-sm-7">@Model.ServiceName</dd>
                        
                        @if (!string.IsNullOrEmpty(Model.ServiceVersion))
                        {
                            <dt class="col-sm-5">Version</dt>
                            <dd class="col-sm-7">@Model.ServiceVersion</dd>
                        }
                        
                        <dt class="col-sm-5">Client</dt>
                        <dd class="col-sm-7">@Model.ClientName</dd>
                        
                        @if (!string.IsNullOrEmpty(Model.Category))
                        {
                            <dt class="col-sm-5">Catégorie</dt>
                            <dd class="col-sm-7">@Model.Category</dd>
                        }
                        
                        <dt class="col-sm-5">Horodatage</dt>
                        <dd class="col-sm-7">@Model.Timestamp.ToString("dd/MM/yyyy HH:mm:ss")</dd>
                        
                        @if (!string.IsNullOrEmpty(Model.MachineName))
                        {
                            <dt class="col-sm-5">Machine</dt>
                            <dd class="col-sm-7">@Model.MachineName</dd>
                        }
                        
                        @if (!string.IsNullOrEmpty(Model.RequestId))
                        {
                            <dt class="col-sm-5">ID Requête</dt>
                            <dd class="col-sm-7"><code>@Model.RequestId</code></dd>
                        }
                    </dl>
                </div>
            </div>

            @if (Model.AnalysisResults != null && Model.AnalysisResults.Any())
            {
                <div class="card mb-4">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0"><i class="bi bi-robot me-2"></i>Analyse IA</h5>
                    </div>
                    <div class="card-body">
                        @foreach (var analysis in Model.AnalysisResults)
                        {
                            <div class="alert alert-info">
                                <i class="bi bi-lightbulb me-2"></i>
                                @analysis.Result
                            </div>
                            
                            @if (analysis.SuggestedActions.Any())
                            {
                                <h6>Actions suggérées :</h6>
                                <ul>
                                    @foreach (var action in analysis.SuggestedActions)
                                    {
                                        <li>@action</li>
                                    }
                                </ul>
                            }
                            
                            <div class="d-flex justify-content-between mt-3">
                                <span class="text-muted small">Analysé le @analysis.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
                                <button class="btn btn-sm btn-outline-info">
                                    <i class="bi bi-arrow-clockwise me-1"></i> Ré-analyser
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }
            else if (Model.AnalyzedByAI)
            {
                <div class="card mb-4">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0"><i class="bi bi-robot me-2"></i>Analyse IA</h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info">
                            <i class="bi bi-lightbulb me-2"></i>
                            @Model.AIAnalysisResult
                        </div>
                        
                        <div class="d-flex justify-content-between mt-3">
                            <span class="text-muted small">Analysé le @DateTime.Now.AddHours(-2).ToString("dd/MM/yyyy HH:mm")</span>
                            <button class="btn btn-sm btn-outline-info">
                                <i class="bi bi-arrow-clockwise me-1"></i> Ré-analyser
                            </button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bi bi-robot me-2"></i>Analyse IA</h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted">Ce log n'a pas encore été analysé par l'IA.</p>
                        <form asp-action="AnalyzeLog" asp-route-id="@Model.Id" method="post">
                            <button type="submit" class="btn btn-primary w-100">
                                <i class="bi bi-magic me-1"></i> Analyser maintenant
                            </button>
                        </form>
                    </div>
                </div>
            }

            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-tools me-2"></i>Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="#" class="btn btn-outline-primary">
                            <i class="bi bi-code-slash me-1"></i> Voir le code source
                        </a>
                        <a href="#" class="btn btn-outline-secondary">
                            <i class="bi bi-archive me-1"></i> Archiver
                        </a>
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle w-100" type="button" id="exportOptions" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-download me-1"></i> Exporter
                            </button>
                            <ul class="dropdown-menu w-100" aria-labelledby="exportOptions">
                                <li><a class="dropdown-item" href="#"><i class="bi bi-file-earmark-text me-2"></i>Texte brut</a></li>
                                <li><a class="dropdown-item" href="#"><i class="bi bi-file-earmark-code me-2"></i>JSON</a></li>
                                <li><a class="dropdown-item" href="#"><i class="bi bi-file-earmark-pdf me-2"></i>PDF</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            <div class="d-grid gap-2">
                <a asp-action="Logs" class="btn btn-secondary">
                    <i class="bi bi-arrow-left me-1"></i> Retour aux logs
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Toggle stack trace and exception details
            document.querySelectorAll('.toggle-exception').forEach(button => {
                button.addEventListener('click', function() {
                    const targetId = this.getAttribute('data-target');
                    const targetElement = document.getElementById(targetId);
                    const icon = this.querySelector('i');
                    
                    if (targetElement.classList.contains('d-none')) {
                        targetElement.classList.remove('d-none');
                        icon.classList.replace('bi-chevron-down', 'bi-chevron-up');
                        this.innerHTML = this.innerHTML.replace('Afficher', 'Masquer');
                    } else {
                        targetElement.classList.add('d-none');
                        icon.classList.replace('bi-chevron-up', 'bi-chevron-down');
                        this.innerHTML = this.innerHTML.replace('Masquer', 'Afficher');
                    }
                });
            });
            
            // Copy to clipboard function
            window.copyToClipboard = function(text, button) {
                navigator.clipboard.writeText(text).then(() => {
                    const originalText = button.innerHTML;
                    button.innerHTML = '<i class="bi bi-check me-1"></i> Copié';
                    setTimeout(() => {
                        button.innerHTML = originalText;
                    }, 2000);
                });
            };
        });
    </script>
}
